//Time complexity O(N) and space O(H)
class Solution {
    boolean x_found = false;
    boolean y_found = false;
    int x_level = 0;
    int y_level = 0;
    public boolean isCousins(TreeNode root, int x, int y) {
        helper(root,0,x,y);


        return x_found && y_found && x_level==y_level;
        
    }

    public void helper(TreeNode root, int level,int x,int y){
        if(root==null) return;

        if(root.val==x){
            x_found = true;
            x_level = level;
        }

        if(root.val==y){
            y_found = true;
            y_level = level;
        }

        if(root.left!=null && root.right!=null){
            if(root.left.val==x && root.right.val==y) return;
            if(root.left.val==y && root.right.val==x) return;
        }
        


        helper(root.left,level+1,x,y);
        helper(root.right,level+1,x,y);
    }
}

//time complexity O(N) and space complexity O(N)
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        if (root == null) return new ArrayList<Integer>();
        List<Integer> res = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();

        queue.add(root);
        while(!queue.isEmpty()){
            int n = queue.size();
            // System.out.println(queue.size());
            
            for(int i=0;i<n;i++){
                TreeNode node = queue.poll();
                // System.out.println(queue.size());
                if(i==n-1){
                    res.add(node.val);
                }
                System.out.println(queue.size());
                if(node.left!=null){
                    queue.add(node.left);
                    System.out.println(node.left);
                }
                if(node.right!=null){
                    queue.add(node.right);
                    System.out.println(node.right);
                }
            }
            
        }

        return res;

        
    }
}
