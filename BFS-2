//Time complexity O(N) ans space complexity O(H)
class Solution {
    List<Integer> res;
    public List<Integer> rightSideView(TreeNode root) {
        
        res = new ArrayList<>();
        helper(root,0);
        return res;
    }

    public void helper(TreeNode root, int level){
        //base
        if(root==null) return;
        if(level==res.size()){
            res.add(root.val);
        }

        //logic
        if(root.right!=null){
            helper(root.right,level+1);
        }
        if(root.left!=null){
            helper(root.left,level+1);
        }
    }
}

//Time complexity O(N) and space complexity O(N)
class Solution {
    public boolean isCousins(TreeNode root, int x, int y) {

        Queue<TreeNode> queue = new LinkedList<>();
        boolean x_found = false;
        boolean y_found = false;

        queue.add(root);

        while(!queue.isEmpty()){

            int n = queue.size();
            for(int i=0;i<n;i++){
                TreeNode node = queue.poll();

                if(node.val==x){
                    x_found =true;
                }
                if(node.val==y){
                    y_found = true;
                }

                if(node.left!=null && node.right!=null){
                    if(node.left.val==x && node.right.val==y)return false;
                    if(node.left.val==y && node.right.val==x) return false;
                }
                if(node.left!=null){
                    queue.add(node.left);
                }
                if(node.right!=null){
                    queue.add(node.right);
                }
            }
            if(x_found && y_found) return true;
            if(x_found || y_found) return false;
        }

        return false;
        
    }
}
